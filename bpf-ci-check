#!/usr/bin/env bash
# SPDX-License-Identifier: Unlicense
set -e

DEFAULT_BASE="bpf-next"
VMTEST_PATH="https://github.com/kernel-patches/vmtest/archive/refs/heads/"

usage() {
    echo "Usage: ${0} [options]"
    echo "Test in CI - Open a GitHub PR for 'ci-test/<branch>' against <base> on <repo>"
    echo "Options:"
    echo "	-h		display this help"
    echo "	-n		dry run (create branch, but do not push or create a PR)"
    echo "	-d branch	development branch to test in CI (default: current)"
    echo "	-b base		base branch to use (default: '${DEFAULT_BASE}')"
    echo "	-r repo		GitHub repository to use, for both branches and for PR"
    echo "			(default: gh-resolved base or first remote found)"
}

switch_back() {
    git switch -q "$current"
}

check_branch() {
    git rev-parse --abbrev-ref "$1"
}

check_tool() {
    for i in "$@"; do
        if ! type -p "$i" >/dev/null; then
            echo "$i not found" >&2
            exit 1
        fi
    done
}

check_tool curl gh git rsync unzip

dryrun=0

OPTIND=1
while getopts "hnd:b:r:" opt; do
    case "$opt" in
    h)
        usage
        exit 0
        ;;
    n)
        dryrun=1
        ;;
    d)
        dev="$OPTARG"
        ;;
    b)
        base="$OPTARG"
        ;;
    r)
        repo="$OPTARG"
        ;;
    *)
        usage
        exit 1
        ;;
    esac
done
shift $((OPTIND-1))

# Exit if we get additional arguments
if [[ "$#" -gt 0 ]]; then
    usage
    exit 1
fi

# Exit if repository is not clean
status="$(git status --porcelain --untracked-files=no | tail -n1)"
if [[ -n "$status" ]]; then
    echo "Repository is not clean. Please stash your changes."
    exit 1
fi

# Development branch
current="$(check_branch HEAD)"
if [[ -z "$dev" ]]; then
    dev="$current"
fi
ci="ci-test/${dev}"

# Exit if $dev does not exist
if ! check_branch "$dev" >/dev/null 2>&1; then
    usage
    exit 1
fi

# Base branch
if [[ -z "$base" ]]; then
    base="$DEFAULT_BASE"
fi

# Repository
if [[ -z "$repo" ]]; then
    repo="$(git config --get-regexp '^remote.*.gh-resolved base' | sed '1s/remote\.\([^.]\+\)\..*/\1/p;d')"
fi
if [[ -z "$repo" ]]; then
    repo="$(git config --get-regexp '^remote.*' | sed '1s/remote\.\([^.]\+\)\..*/\1/p;d')"
fi

echo "Development branch: '${dev}', base branch: '${base}', repository: '${repo}'"
read -rp "Carry on? [Y/n]: " answer
case "$answer" in
    [nN]*)
        exit 1
        ;;
esac

# Exit if base branch not found
if ! check_branch "remotes/${repo}/${base}" >/dev/null 2>&1; then
    echo "Base branch ${base} not found in the repo (try 'git fetch ${repo} ${base}'?)"
    exit 1
fi

# Delete previous CI branch if already existing
if check_branch "$ci" >/dev/null 2>&1; then
    read -rp "Found branch ${ci}. Delete it and create a new one? [Y/n]: " answer
    case "$answer" in
        [nN]*)
            exit 1
            ;;
        *)
            git branch -q -D "$ci"
            ;;
    esac
fi

trap switch_back EXIT

# Retrieve title (subject of last commit) for development branch
git switch -q "$dev"
title="$(git show -s --pretty=format:%s)"

# Create CI branch
git switch -q -c "$ci"

root="$(git rev-parse --show-toplevel)"

# Download and unzip CI files
curl -sL "${VMTEST_PATH}master.zip" -o "${root}/master.zip"
unzip -q "${root}/master.zip" -d "${root}"
rm "${root}/master.zip"

# Extract and commit CI files
rsync -a --exclude README "${root}/vmtest-master/." "$root"
rm -r "${root}/vmtest-master"

git add -f "${root}/.github" "${root}/travis-ci"
git commit -q -m "add CI files"

sed -i "s/github.repository != 'kernel-patches\/bpf' && github.repository != 'kernel-patches\/bpf-rc'/false/g" "${root}/.github/workflows/test.yml"
git add -f "${root}/.github"
git commit -q -m "avoid overwriting bpf sources with bpf-next sources"

# Push CI branch to GitHub
if [[ $dryrun -eq 1 ]]; then
    echo "[dry-run] git push -q -f $repo -u HEAD"
else
    git push -q -f "$repo" -u HEAD
fi

# Search for existing PR, create one if none found
pr=$(gh pr list --json baseRefName,headRefName,url --jq ".[] | select(.headRefName == \"${ci}\" and .baseRefName == \"${base}\").url")
if [[ -z $pr ]]; then
    if [[ $dryrun -eq 1 ]]; then
        echo "[dry-run] gh pr create --base ${base} --head ${ci} --title \"[CI run] ${title}\" --body \"\""
    else
        gh pr create --base "$base" --head "$ci" --title "[CI run] ${title}" --body ""
    fi
else
    echo "Reusing existing PR: ${pr}"
fi
